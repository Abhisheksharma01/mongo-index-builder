"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loggerSchema = undefined;

var _joi = require("joi");

var _joi2 = _interopRequireDefault(_joi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var loggerSchema = exports.loggerSchema = _joi2.default.object().keys({
  "streams": _joi2.default.array().items(_joi2.default.alternatives().try(_joi2.default.object().keys({
    "level": _joi2.default.alternatives().try(_joi2.default.string().insensitive().valid(["trace", "debug", "info", "warn", "error", "fatal"]), _joi2.default.number().valid(10, 20, 30, 40, 50, 60)).required(),
    "stream": _joi2.default.any().required(),
    "type": _joi2.default.string().valid("stream")
  }), _joi2.default.object().keys({
    "level": _joi2.default.alternatives().try(_joi2.default.string().insensitive().valid(["trace", "debug", "info", "warn", " error", "fatal"]), _joi2.default.number().valid(10, 20, 30, 40, 50, 60)).required(),
    "type": _joi2.default.string().valid("file"),
    "path": _joi2.default.string().required()
  }), _joi2.default.object().keys({
    "level": _joi2.default.alternatives().try(_joi2.default.string().insensitive().valid(["trace", "debug", "info", "warn", "error", "fatal"]), _joi2.default.number().valid(10, 20, 30, 40, 50, 60)).required(),
    "type": _joi2.default.string().required().valid("rotating-file"),
    "path": _joi2.default.string().required(),
    "period": _joi2.default.string(),
    "count": _joi2.default.number()
  }))).min(1).required(),
  "name": _joi2.default.string().required()
}).required().example({
  "streams": [{
    "level": "fatal",
    "stream": process.stdout
  }],
  "name": "My-logger"
}); // Imports
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9zY2hlbWEocykvbG9nZ2VyU2NoZW1hLmVzNiJdLCJuYW1lcyI6WyJsb2dnZXJTY2hlbWEiLCJvYmplY3QiLCJrZXlzIiwiYXJyYXkiLCJpdGVtcyIsImFsdGVybmF0aXZlcyIsInRyeSIsInN0cmluZyIsImluc2Vuc2l0aXZlIiwidmFsaWQiLCJudW1iZXIiLCJyZXF1aXJlZCIsImFueSIsIm1pbiIsImV4YW1wbGUiLCJwcm9jZXNzIiwic3Rkb3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7Ozs7OztBQUVPLElBQU1BLHNDQUFlLGNBQUlDLE1BQUosR0FDekJDLElBRHlCLENBQ3BCO0FBQ0osYUFBVyxjQUFJQyxLQUFKLEdBQVlDLEtBQVosQ0FDVCxjQUFJQyxZQUFKLEdBQW1CQyxHQUFuQixDQUNFLGNBQUlMLE1BQUosR0FBYUMsSUFBYixDQUFrQjtBQUNoQixhQUFTLGNBQUlHLFlBQUosR0FBbUJDLEdBQW5CLENBQXVCLGNBQUlDLE1BQUosR0FBYUMsV0FBYixHQUEyQkMsS0FBM0IsQ0FBaUMsQ0FDL0QsT0FEK0QsRUFFL0QsT0FGK0QsRUFHL0QsTUFIK0QsRUFJL0QsTUFKK0QsRUFLL0QsT0FMK0QsRUFNL0QsT0FOK0QsQ0FBakMsQ0FBdkIsRUFRUCxjQUFJQyxNQUFKLEdBQWFELEtBQWIsQ0FDRSxFQURGLEVBRUUsRUFGRixFQUdFLEVBSEYsRUFJRSxFQUpGLEVBS0UsRUFMRixFQU1FLEVBTkYsQ0FSTyxFQWdCUEUsUUFoQk8sRUFETztBQWtCaEIsY0FBVSxjQUFJQyxHQUFKLEdBQVVELFFBQVYsRUFsQk07QUFtQmhCLFlBQVEsY0FBSUosTUFBSixHQUFhRSxLQUFiLENBQW1CLFFBQW5CO0FBbkJRLEdBQWxCLENBREYsRUFzQkUsY0FBSVIsTUFBSixHQUFhQyxJQUFiLENBQWtCO0FBQ2hCLGFBQVMsY0FBSUcsWUFBSixHQUFtQkMsR0FBbkIsQ0FBdUIsY0FBSUMsTUFBSixHQUFhQyxXQUFiLEdBQTJCQyxLQUEzQixDQUFpQyxDQUMvRCxPQUQrRCxFQUUvRCxPQUYrRCxFQUcvRCxNQUgrRCxFQUkvRCxNQUorRCxFQUsvRCxRQUwrRCxFQU0vRCxPQU4rRCxDQUFqQyxDQUF2QixFQVFQLGNBQUlDLE1BQUosR0FBYUQsS0FBYixDQUNFLEVBREYsRUFFRSxFQUZGLEVBR0UsRUFIRixFQUlFLEVBSkYsRUFLRSxFQUxGLEVBTUUsRUFORixDQVJPLEVBZ0JQRSxRQWhCTyxFQURPO0FBa0JoQixZQUFRLGNBQUlKLE1BQUosR0FBYUUsS0FBYixDQUFtQixNQUFuQixDQWxCUTtBQW1CaEIsWUFBUSxjQUFJRixNQUFKLEdBQWFJLFFBQWI7QUFuQlEsR0FBbEIsQ0F0QkYsRUEyQ0UsY0FBSVYsTUFBSixHQUFhQyxJQUFiLENBQWtCO0FBQ2hCLGFBQVMsY0FBSUcsWUFBSixHQUFtQkMsR0FBbkIsQ0FBdUIsY0FBSUMsTUFBSixHQUFhQyxXQUFiLEdBQTJCQyxLQUEzQixDQUFpQyxDQUMvRCxPQUQrRCxFQUUvRCxPQUYrRCxFQUcvRCxNQUgrRCxFQUkvRCxNQUorRCxFQUsvRCxPQUwrRCxFQU0vRCxPQU4rRCxDQUFqQyxDQUF2QixFQVFQLGNBQUlDLE1BQUosR0FBYUQsS0FBYixDQUNFLEVBREYsRUFFRSxFQUZGLEVBR0UsRUFIRixFQUlFLEVBSkYsRUFLRSxFQUxGLEVBTUUsRUFORixDQVJPLEVBZ0JQRSxRQWhCTyxFQURPO0FBa0JoQixZQUFRLGNBQUlKLE1BQUosR0FBYUksUUFBYixHQUF3QkYsS0FBeEIsQ0FBOEIsZUFBOUIsQ0FsQlE7QUFtQmhCLFlBQVEsY0FBSUYsTUFBSixHQUFhSSxRQUFiLEVBbkJRO0FBb0JoQixjQUFVLGNBQUlKLE1BQUosRUFwQk07QUFxQmhCLGFBQVMsY0FBSUcsTUFBSjtBQXJCTyxHQUFsQixDQTNDRixDQURTLEVBbUVORyxHQW5FTSxDQW1FRixDQW5FRSxFQW1FQ0YsUUFuRUQsRUFEUDtBQXFFSixVQUFRLGNBQUlKLE1BQUosR0FBYUksUUFBYjtBQXJFSixDQURvQixFQXVFdkJBLFFBdkV1QixHQXdFekJHLE9BeEV5QixDQXdFakI7QUFDUCxhQUFXLENBQUM7QUFDVixhQUFTLE9BREM7QUFFVixjQUFVQyxRQUFRQztBQUZSLEdBQUQsQ0FESjtBQUtQLFVBQVE7QUFMRCxDQXhFaUIsQ0FBckIsQyxDQUpQIiwiZmlsZSI6ImxvZ2dlclNjaGVtYS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcblxuaW1wb3J0IEpvaSBmcm9tIFwiam9pXCI7XG5cbmV4cG9ydCBjb25zdCBsb2dnZXJTY2hlbWEgPSBKb2kub2JqZWN0KClcbiAgLmtleXMoe1xuICAgIFwic3RyZWFtc1wiOiBKb2kuYXJyYXkoKS5pdGVtcyhcbiAgICAgIEpvaS5hbHRlcm5hdGl2ZXMoKS50cnkoXG4gICAgICAgIEpvaS5vYmplY3QoKS5rZXlzKHtcbiAgICAgICAgICBcImxldmVsXCI6IEpvaS5hbHRlcm5hdGl2ZXMoKS50cnkoSm9pLnN0cmluZygpLmluc2Vuc2l0aXZlKCkudmFsaWQoW1xuICAgICAgICAgICAgXCJ0cmFjZVwiLFxuICAgICAgICAgICAgXCJkZWJ1Z1wiLFxuICAgICAgICAgICAgXCJpbmZvXCIsXG4gICAgICAgICAgICBcIndhcm5cIixcbiAgICAgICAgICAgIFwiZXJyb3JcIixcbiAgICAgICAgICAgIFwiZmF0YWxcIlxuICAgICAgICAgIF0pLFxuICAgICAgICAgICAgSm9pLm51bWJlcigpLnZhbGlkKFxuICAgICAgICAgICAgICAxMCxcbiAgICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgICA0MCxcbiAgICAgICAgICAgICAgNTAsXG4gICAgICAgICAgICAgIDYwXG4gICAgICAgICAgICApXG4gICAgICAgICAgKS5yZXF1aXJlZCgpLFxuICAgICAgICAgIFwic3RyZWFtXCI6IEpvaS5hbnkoKS5yZXF1aXJlZCgpLFxuICAgICAgICAgIFwidHlwZVwiOiBKb2kuc3RyaW5nKCkudmFsaWQoXCJzdHJlYW1cIilcbiAgICAgICAgfSksXG4gICAgICAgIEpvaS5vYmplY3QoKS5rZXlzKHtcbiAgICAgICAgICBcImxldmVsXCI6IEpvaS5hbHRlcm5hdGl2ZXMoKS50cnkoSm9pLnN0cmluZygpLmluc2Vuc2l0aXZlKCkudmFsaWQoW1xuICAgICAgICAgICAgXCJ0cmFjZVwiLFxuICAgICAgICAgICAgXCJkZWJ1Z1wiLFxuICAgICAgICAgICAgXCJpbmZvXCIsXG4gICAgICAgICAgICBcIndhcm5cIixcbiAgICAgICAgICAgIFwiIGVycm9yXCIsXG4gICAgICAgICAgICBcImZhdGFsXCJcbiAgICAgICAgICBdKSxcbiAgICAgICAgICAgIEpvaS5udW1iZXIoKS52YWxpZChcbiAgICAgICAgICAgICAgMTAsXG4gICAgICAgICAgICAgIDIwLFxuICAgICAgICAgICAgICAzMCxcbiAgICAgICAgICAgICAgNDAsXG4gICAgICAgICAgICAgIDUwLFxuICAgICAgICAgICAgICA2MFxuICAgICAgICAgICAgKVxuICAgICAgICAgICkucmVxdWlyZWQoKSxcbiAgICAgICAgICBcInR5cGVcIjogSm9pLnN0cmluZygpLnZhbGlkKFwiZmlsZVwiKSxcbiAgICAgICAgICBcInBhdGhcIjogSm9pLnN0cmluZygpLnJlcXVpcmVkKClcbiAgICAgICAgfSksXG4gICAgICAgIEpvaS5vYmplY3QoKS5rZXlzKHtcbiAgICAgICAgICBcImxldmVsXCI6IEpvaS5hbHRlcm5hdGl2ZXMoKS50cnkoSm9pLnN0cmluZygpLmluc2Vuc2l0aXZlKCkudmFsaWQoW1xuICAgICAgICAgICAgXCJ0cmFjZVwiLFxuICAgICAgICAgICAgXCJkZWJ1Z1wiLFxuICAgICAgICAgICAgXCJpbmZvXCIsXG4gICAgICAgICAgICBcIndhcm5cIixcbiAgICAgICAgICAgIFwiZXJyb3JcIixcbiAgICAgICAgICAgIFwiZmF0YWxcIlxuICAgICAgICAgIF0pLFxuICAgICAgICAgICAgSm9pLm51bWJlcigpLnZhbGlkKFxuICAgICAgICAgICAgICAxMCxcbiAgICAgICAgICAgICAgMjAsXG4gICAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgICA0MCxcbiAgICAgICAgICAgICAgNTAsXG4gICAgICAgICAgICAgIDYwXG4gICAgICAgICAgICApXG4gICAgICAgICAgKS5yZXF1aXJlZCgpLFxuICAgICAgICAgIFwidHlwZVwiOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKS52YWxpZChcInJvdGF0aW5nLWZpbGVcIiksXG4gICAgICAgICAgXCJwYXRoXCI6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICAgICAgICAgIFwicGVyaW9kXCI6IEpvaS5zdHJpbmcoKSxcbiAgICAgICAgICBcImNvdW50XCI6IEpvaS5udW1iZXIoKVxuICAgICAgICB9KVxuICAgICAgKSkubWluKDEpLnJlcXVpcmVkKCksXG4gICAgXCJuYW1lXCI6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpXG4gIH0pLnJlcXVpcmVkKClcbiAgLmV4YW1wbGUoe1xuICAgIFwic3RyZWFtc1wiOiBbe1xuICAgICAgXCJsZXZlbFwiOiBcImZhdGFsXCIsXG4gICAgICBcInN0cmVhbVwiOiBwcm9jZXNzLnN0ZG91dFxuICAgIH1dLFxuICAgIFwibmFtZVwiOiBcIk15LWxvZ2dlclwiXG4gIH0pO1xuIl19
//# sourceMappingURL=loggerSchema.js.map
